{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Mappings" : {
      "NatRegionMap" : {
        "us-east-1"      : { "AMI" : "ami-184dc970" }, {# AMI from 2014, update when required #}
        "us-west-1"      : { "AMI" : "ami-a98396ec" }, {# AMI from 2014, update when required #}
        "us-west-2"      : { "AMI" : "ami-290f4119" }, {# AMI from 2014, update when required #}
        "eu-west-1"      : { "AMI" : "ami-a8dd45db" }, {# AMI from 2016, amzn-ami-vpc-nat-hvm-2016.03.3.x86_64-ebs, update when required #}
        "eu-central-1"   : { "AMI" : "ami-5825cd37" }, {# AMI from 2016, amzn-ami-vpc-nat-hvm-2016.03.3.x86_64-ebs, update when required #}
        "sa-east-1"      : { "AMI" : "ami-8122969c" }, {# AMI from 2014, update when required #}
        "ap-southeast-1" : { "AMI" : "ami-6aa38238" }, {# AMI from 2014, update when required #}
        "ap-southeast-2" : { "AMI" : "ami-893f53b3" }, {# AMI from 2014, update when required #}
        "ap-northeast-1" : { "AMI" : "ami-27d6e626" }  {# AMI from 2014, update when required #}
      }
  },
  "Resources": {
  {% if nat.firewall is defined %}
  {% for group_key, group in nat.firewall.items() %}
          {% for type in group.keys() %}
          {% for proto, rules in group[type].items() %}
          {% for rule in rules %}
          {% set port_split = rule.keys()[0].split('-') %}
          {% set from_port = '-1' if proto == 'icmp' else port_split[0] %}
          {% set to_port = '-1' if proto == 'icmp' else port_split[-1] %}
          {% set src_dest = rule.values()[0] %}
          {% set sec_type = 'Ingress' if type == 'inbound' else 'Egress' %}
          {% set src_dest_type = 'Source' if type == 'inbound' else 'Destination' %}
          "{{ type }}{{ group_key }}{{ proto }}{{ loop.index }}"        : {
                      "Type" : "AWS::EC2::SecurityGroup{{ sec_type }}",
                      "Properties" : {
                          "FromPort" : "{{ from_port  }}",
                          "IpProtocol" : "{{ proto }}",
                          "ToPort"     : "{{ to_port }}",
                          {% if src_dest in nat.firewall %}
                          "{{ src_dest_type }}SecurityGroupId" : {
                              "Fn::GetAtt" : [
                                  "SecurityGroupNAT{{ nat.id}}{{ src_dest }}",
                                  "GroupId"
                              ]
                          },
                          {% elif src_dest in firewall_ids %}
                          "{{ src_dest_type }}SecurityGroupId" : "{{ firewall_ids[src_dest] }}",
                          {% else %}
                          "CidrIp" : "{{ src_dest }}",
                          {% endif %}
                          "GroupId"               : {
                              "Fn::GetAtt" : [
                                  "SecurityGroupNAT{{ nat.id}}{{ group_key }}",
                                  "GroupId"
                              ]
                          }
                      }
                  },
          {% endfor %}
          {% endfor %}
          {% endfor %}


       "SecurityGroupNAT{{ nat.id}}{{ group_key }}"                            : {
              "Type" : "AWS::EC2::SecurityGroup",
              "Properties" : {
                  "VpcId" : "{{ network_id }}",
                  "GroupDescription" : "Firewalling for {{ group_key }}",
                  "Tags"                 : [
                      {
                          "Key" : "Name",
                          "Value" : "SecurityGroupNAT{{ nat.id}}{{ group_key }}"
                      }
                  ]
              }
          },
   {% endfor %}
   {% endif %}
    "NAT" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : "{{ nat.type }}",
        "KeyName"  : "{{ nat.key_pair }}",
        "SourceDestCheck" : "false",
        "ImageId" : { "Fn::FindInMap" : [ "NatRegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
    "NetworkInterfaces" : [{
	      {% if nat.firewall is defined %}
          "GroupSet"                 : [
          {% for group_key, group in nat.firewall.items() %}
          { "Ref" : "SecurityGroupNAT{{ nat.id }}{{ group_key }}" }
          {% if not loop.last %},{% endif %}
          {% endfor %}
          ],
          {% endif %}
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : "{{ subnet_id }}"
        }],
	"Tags" : [
	  { "Key" : "Name", "Value" : "{{ nat.name }}" }
        ],
	"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
	  "#!/bin/bash\n",
	  "yum update -y && yum install -y yum-cron && chkconfig yum-cron on"
	]]}}
      }
    },

    {% for routing_key, routing_id in routing_ids.items() %}
        "NATRoute{{ routing_key }}": {
           "Type" : "AWS::EC2::Route",
           "Properties" : {
              "RouteTableId" : "{{ routing_id }}",
              "DestinationCidrBlock" : "0.0.0.0/0",
              "InstanceId" : {"Ref": "NAT"}
           }
        }{% if not loop.last %},{% endif %}

    {% endfor %}


  },
    "Outputs" : {
  {% if nat.firewall is defined %}
  {% for group_key, group in nat.firewall.items() %}
      "{{ group_key }}" : {
        "Description" : "{{ group_key }} firewall ID",
        "Value" : {
          "Ref" : "SecurityGroupNAT{{nat.id}}{{ group_key }}"
        }
      }
      {% if not loop.last %},{% endif %}
      {% endfor %}
    }
  {% endif %}

}
